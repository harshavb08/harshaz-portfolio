{"ast":null,"code":"import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\n\nconst fixOutMode = data => {\n  if (!isInArray(data.outMode, data.checkModes)) {\n    return;\n  }\n\n  if (data.coord > data.maxCoord - data.radius * 2) {\n    data.setCb(-data.radius);\n  } else if (data.coord < data.radius * 2) {\n    data.setCb(data.radius);\n  }\n};\n\nexport class Particle {\n  constructor(engine, id, container, position, overrideOptions, group) {\n    this.container = container;\n    this._engine = engine;\n    this.init(id, position, overrideOptions, group);\n  }\n\n  destroy(override) {\n    var _a;\n\n    if (this.unbreakable || this.destroyed) {\n      return;\n    }\n\n    this.destroyed = true;\n    this.bubble.inRange = false;\n    this.slow.inRange = false;\n\n    for (const [, plugin] of this.container.plugins) {\n      if (plugin.particleDestroyed) {\n        plugin.particleDestroyed(this, override);\n      }\n    }\n\n    for (const updater of this.container.particles.updaters) {\n      if (updater.particleDestroyed) {\n        updater.particleDestroyed(this, override);\n      }\n    }\n\n    (_a = this.pathGenerator) === null || _a === void 0 ? void 0 : _a.reset(this);\n  }\n\n  draw(delta) {\n    const container = this.container;\n\n    for (const [, plugin] of container.plugins) {\n      container.canvas.drawParticlePlugin(plugin, this, delta);\n    }\n\n    container.canvas.drawParticle(this, delta);\n  }\n\n  getFillColor() {\n    var _a, _b;\n\n    const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n\n    if (color && this.roll && (this.backColor || this.roll.alter)) {\n      const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1,\n            backSum = this.roll.horizontal ? Math.PI / 2 : 0,\n            rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n\n      if (rolled) {\n        if (this.backColor) {\n          return this.backColor;\n        }\n\n        if (this.roll.alter) {\n          return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n        }\n      }\n    }\n\n    return color;\n  }\n\n  getMass() {\n    return this.getRadius() ** 2 * Math.PI / 2;\n  }\n\n  getPosition() {\n    return {\n      x: this.position.x + this.offset.x,\n      y: this.position.y + this.offset.y,\n      z: this.position.z\n    };\n  }\n\n  getRadius() {\n    var _a;\n\n    return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n  }\n\n  getStrokeColor() {\n    var _a, _b;\n\n    return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n  }\n\n  init(id, position, overrideOptions, group) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n    const container = this.container,\n          engine = this._engine;\n    this.id = id;\n    this.group = group;\n    this.fill = true;\n    this.pathRotation = false;\n    this.close = true;\n    this.lastPathTime = 0;\n    this.destroyed = false;\n    this.unbreakable = false;\n    this.rotation = 0;\n    this.misplaced = false;\n    this.retina = {\n      maxDistance: {}\n    };\n    this.outType = \"normal\";\n    this.ignoresResizeRatio = true;\n    const pxRatio = container.retina.pixelRatio,\n          mainOptions = container.actualOptions,\n          particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles),\n          shapeType = particlesOptions.shape.type,\n          {\n      reduceDuplicates\n    } = particlesOptions;\n    this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n    const shapeOptions = particlesOptions.shape;\n\n    if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n      const overrideShapeType = overrideOptions.shape.type,\n            shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n\n      if (shape) {\n        this.shape = shape;\n        shapeOptions.load(overrideOptions.shape);\n      }\n    }\n\n    this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n    particlesOptions.load(overrideOptions);\n    particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n    this.interactivity = new Interactivity(engine, container);\n    this.interactivity.load(container.actualOptions.interactivity);\n    this.interactivity.load(particlesOptions.interactivity);\n    this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n    this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n    this.options = particlesOptions;\n    const pathOptions = this.options.move.path;\n    this.pathDelay = getValue(pathOptions.delay) * 1000;\n\n    if (pathOptions.generator) {\n      this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n\n      if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n        this.pathGenerator.init(container);\n      }\n    }\n\n    const zIndexValue = getRangeValue(this.options.zIndex.value);\n    container.retina.initParticle(this);\n    const sizeOptions = this.options.size,\n          sizeRange = sizeOptions.value,\n          sizeAnimation = sizeOptions.animation;\n    this.size = {\n      enable: sizeOptions.animation.enable,\n      value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n      max: getRangeMax(sizeRange) * pxRatio,\n      min: getRangeMin(sizeRange) * pxRatio,\n      loops: 0,\n      maxLoops: getRangeValue(sizeOptions.animation.count)\n    };\n\n    if (sizeAnimation.enable) {\n      this.size.status = \"increasing\";\n      this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n\n      switch (sizeAnimation.startValue) {\n        case \"min\":\n          this.size.value = this.size.min;\n          this.size.status = \"increasing\";\n          break;\n\n        case \"random\":\n          this.size.value = randomInRange(this.size) * pxRatio;\n          this.size.status = getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n          break;\n\n        case \"max\":\n        default:\n          this.size.value = this.size.max;\n          this.size.status = \"decreasing\";\n          break;\n      }\n    }\n\n    this.bubble = {\n      inRange: false\n    };\n    this.slow = {\n      inRange: false,\n      factor: 1\n    };\n    this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n    this.initialPosition = this.position.copy();\n    const canvasSize = container.canvas.size,\n          moveCenter = Object.assign({}, this.options.move.center),\n          isCenterPercent = moveCenter.mode === \"percent\";\n    this.moveCenter = {\n      x: moveCenter.x * (isCenterPercent ? canvasSize.width / 100 : 1),\n      y: moveCenter.y * (isCenterPercent ? canvasSize.height / 100 : 1),\n      radius: (_f = this.options.move.center.radius) !== null && _f !== void 0 ? _f : 0,\n      mode: (_g = this.options.move.center.mode) !== null && _g !== void 0 ? _g : \"percent\"\n    };\n    this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n\n    switch (this.options.move.direction) {\n      case \"inside\":\n        this.outType = \"inside\";\n        break;\n\n      case \"outside\":\n        this.outType = \"outside\";\n        break;\n    }\n\n    this.initialVelocity = this._calculateVelocity();\n    this.velocity = this.initialVelocity.copy();\n    this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n    this.offset = Vector.origin;\n    const particles = container.particles;\n    particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n    particles.lastZIndex = this.position.z;\n    this.zIndexFactor = this.position.z / container.zLayers;\n    this.sides = 24;\n    let drawer = container.drawers.get(this.shape);\n\n    if (!drawer) {\n      drawer = this._engine.plugins.getShapeDrawer(this.shape);\n\n      if (drawer) {\n        container.drawers.set(this.shape, drawer);\n      }\n    }\n\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n      drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n    }\n\n    const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n    if (sideCountFunc) {\n      this.sides = sideCountFunc(this);\n    }\n\n    this.spawning = false;\n    this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n\n    for (const updater of container.particles.updaters) {\n      updater.init(this);\n    }\n\n    for (const mover of container.particles.movers) {\n      (_h = mover.init) === null || _h === void 0 ? void 0 : _h.call(mover, this);\n    }\n\n    if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n      drawer.particleInit(container, this);\n    }\n\n    for (const [, plugin] of container.plugins) {\n      (_j = plugin.particleCreated) === null || _j === void 0 ? void 0 : _j.call(plugin, this);\n    }\n  }\n\n  isInsideCanvas() {\n    const radius = this.getRadius(),\n          canvasSize = this.container.canvas.size;\n    return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n  }\n\n  isVisible() {\n    return !this.destroyed && !this.spawning && this.isInsideCanvas();\n  }\n\n  reset() {\n    var _a;\n\n    for (const updater of this.container.particles.updaters) {\n      (_a = updater.reset) === null || _a === void 0 ? void 0 : _a.call(updater, this);\n    }\n  }\n\n  _calcPosition(container, position, zIndex) {\n    let tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n    var _a, _b, _c, _d;\n\n    for (const [, plugin] of container.plugins) {\n      const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n      if (pluginPos !== undefined) {\n        return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n      }\n    }\n\n    const canvasSize = container.canvas.size,\n          exactPosition = calcExactPositionOrRandomFromSize({\n      size: canvasSize,\n      position: position\n    }),\n          pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n          radius = this.getRadius(),\n          outModes = this.options.move.outModes,\n          fixHorizontal = outMode => {\n      fixOutMode({\n        outMode,\n        checkModes: [\"bounce\", \"bounce-horizontal\"],\n        coord: pos.x,\n        maxCoord: container.canvas.size.width,\n        setCb: value => pos.x += value,\n        radius\n      });\n    },\n          fixVertical = outMode => {\n      fixOutMode({\n        outMode,\n        checkModes: [\"bounce\", \"bounce-vertical\"],\n        coord: pos.y,\n        maxCoord: container.canvas.size.height,\n        setCb: value => pos.y += value,\n        radius\n      });\n    };\n\n    fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n    fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n    fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n    fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n\n    if (this._checkOverlap(pos, tryCount)) {\n      return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n    }\n\n    return pos;\n  }\n\n  _calculateVelocity() {\n    const baseVelocity = getParticleBaseVelocity(this.direction),\n          res = baseVelocity.copy(),\n          moveOptions = this.options.move;\n\n    if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n      return res;\n    }\n\n    const rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value),\n          radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset),\n          range = {\n      left: radOffset - rad / 2,\n      right: radOffset + rad / 2\n    };\n\n    if (!moveOptions.straight) {\n      res.angle += randomInRange(setRangeValue(range.left, range.right));\n    }\n\n    if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n      res.length *= getRandom();\n    }\n\n    return res;\n  }\n\n  _checkOverlap(pos) {\n    let tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const collisionsOptions = this.options.collisions,\n          radius = this.getRadius();\n\n    if (!collisionsOptions.enable) {\n      return false;\n    }\n\n    const overlapOptions = collisionsOptions.overlap;\n\n    if (overlapOptions.enable) {\n      return false;\n    }\n\n    const retries = overlapOptions.retries;\n\n    if (retries >= 0 && tryCount > retries) {\n      throw new Error(\"Particle is overlapping and can't be placed\");\n    }\n\n    let overlaps = false;\n\n    for (const particle of this.container.particles.array) {\n      if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n        overlaps = true;\n        break;\n      }\n    }\n\n    return overlaps;\n  }\n\n  _loadShapeData(shapeOptions, reduceDuplicates) {\n    const shapeData = shapeOptions.options[this.shape];\n\n    if (shapeData) {\n      return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n    }\n  }\n\n}","map":{"version":3,"names":["calcExactPositionOrRandomFromSize","clamp","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRandom","getRangeMax","getRangeMin","getRangeValue","getValue","randomInRange","setRangeValue","deepExtend","isInArray","itemFromSingleOrMultiple","getHslFromAnimation","rangeColorToRgb","Interactivity","Vector","Vector3d","alterHsl","loadParticlesOptions","fixOutMode","data","outMode","checkModes","coord","maxCoord","radius","setCb","Particle","constructor","engine","id","container","position","overrideOptions","group","_engine","init","destroy","override","_a","unbreakable","destroyed","bubble","inRange","slow","plugin","plugins","particleDestroyed","updater","particles","updaters","pathGenerator","reset","draw","delta","canvas","drawParticlePlugin","drawParticle","getFillColor","_b","color","roll","backColor","alter","backFactor","horizontal","vertical","backSum","Math","PI","rolled","floor","angle","type","value","getMass","getRadius","getPosition","x","offset","y","z","size","getStrokeColor","strokeColor","_c","_d","_e","_f","_g","_h","_j","fill","pathRotation","close","lastPathTime","rotation","misplaced","retina","maxDistance","outType","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","shapeType","shape","reduceDuplicates","shapeOptions","overrideShapeType","load","shapeData","_loadShapeData","interactivity","options","pathOptions","move","path","pathDelay","delay","generator","getPathGenerator","addPath","zIndexValue","zIndex","initParticle","sizeOptions","sizeRange","sizeAnimation","animation","enable","max","min","loops","maxLoops","count","status","decay","startValue","factor","_calcPosition","zLayers","initialPosition","copy","canvasSize","moveCenter","Object","assign","center","isCenterPercent","mode","width","height","direction","initialVelocity","_calculateVelocity","velocity","moveDecay","origin","needsSort","lastZIndex","zIndexFactor","sides","drawer","drawers","get","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","shadow","mover","movers","call","particleInit","particleCreated","isInsideCanvas","isVisible","tryCount","pluginPos","particlePosition","undefined","create","exactPosition","pos","outModes","fixHorizontal","fixVertical","left","default","right","top","bottom","_checkOverlap","baseVelocity","res","moveOptions","rad","radOffset","range","straight","random","speed","length","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","particle","array"],"sources":["D:/Projects/my-Portfolio/node_modules/tsparticles-engine/esm/Core/Particle.js"],"sourcesContent":["import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nconst fixOutMode = (data) => {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    if (data.coord > data.maxCoord - data.radius * 2) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < data.radius * 2) {\n        data.setCb(data.radius);\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        this.container = container;\n        this._engine = engine;\n        this.init(id, position, overrideOptions, group);\n    }\n    destroy(override) {\n        var _a;\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        for (const updater of this.container.particles.updaters) {\n            if (updater.particleDestroyed) {\n                updater.particleDestroyed(this, override);\n            }\n        }\n        (_a = this.pathGenerator) === null || _a === void 0 ? void 0 : _a.reset(this);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        var _a, _b;\n        const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n        if (color && this.roll && (this.backColor || this.roll.alter)) {\n            const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1, backSum = this.roll.horizontal ? Math.PI / 2 : 0, rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                if (this.roll.alter) {\n                    return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n                }\n            }\n        }\n        return color;\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    init(id, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.fill = true;\n        this.pathRotation = false;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const shapeOptions = particlesOptions.shape;\n        if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n            const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n            if (shape) {\n                this.shape = shape;\n                shapeOptions.load(overrideOptions.shape);\n            }\n        }\n        this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n        this.interactivity = new Interactivity(engine, container);\n        this.interactivity.load(container.actualOptions.interactivity);\n        this.interactivity.load(particlesOptions.interactivity);\n        this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n        this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getValue(pathOptions.delay) * 1000;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        const zIndexValue = getRangeValue(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value, sizeAnimation = sizeOptions.animation;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n            max: getRangeMax(sizeRange) * pxRatio,\n            min: getRangeMin(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: getRangeValue(sizeOptions.animation.count),\n        };\n        if (sizeAnimation.enable) {\n            this.size.status = \"increasing\";\n            this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n            switch (sizeAnimation.startValue) {\n                case \"min\":\n                    this.size.value = this.size.min;\n                    this.size.status = \"increasing\";\n                    break;\n                case \"random\":\n                    this.size.value = randomInRange(this.size) * pxRatio;\n                    this.size.status = getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n                    break;\n                case \"max\":\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = \"decreasing\";\n                    break;\n            }\n        }\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        const canvasSize = container.canvas.size, moveCenter = Object.assign({}, this.options.move.center), isCenterPercent = moveCenter.mode === \"percent\";\n        this.moveCenter = {\n            x: moveCenter.x * (isCenterPercent ? canvasSize.width / 100 : 1),\n            y: moveCenter.y * (isCenterPercent ? canvasSize.height / 100 : 1),\n            radius: (_f = this.options.move.center.radius) !== null && _f !== void 0 ? _f : 0,\n            mode: (_g = this.options.move.center.mode) !== null && _g !== void 0 ? _g : \"percent\",\n        };\n        this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n        switch (this.options.move.direction) {\n            case \"inside\":\n                this.outType = \"inside\";\n                break;\n            case \"outside\":\n                this.outType = \"outside\";\n                break;\n        }\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        this.offset = Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = this._engine.plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            updater.init(this);\n        }\n        for (const mover of container.particles.movers) {\n            (_h = mover.init) === null || _h === void 0 ? void 0 : _h.call(mover, this);\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            (_j = plugin.particleCreated) === null || _j === void 0 ? void 0 : _j.call(plugin, this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        var _a;\n        for (const updater of this.container.particles.updaters) {\n            (_a = updater.reset) === null || _a === void 0 ? void 0 : _a.call(updater, this);\n        }\n    }\n    _calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n            size: canvasSize,\n            position: position,\n        }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-horizontal\"],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-vertical\"],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n        fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n        fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n        fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n        if (this._checkOverlap(pos, tryCount)) {\n            return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    _calculateVelocity() {\n        const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n        if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n            return res;\n        }\n        const rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value), radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset), range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += randomInRange(setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= getRandom();\n        }\n        return res;\n    }\n    _checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions, radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    _loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}