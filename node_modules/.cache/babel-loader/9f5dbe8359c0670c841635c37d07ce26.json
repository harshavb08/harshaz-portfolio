{"ast":null,"code":"import _slicedToArray from \"D:/Projects/my-Portfolio/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"D:/Projects/my-Portfolio/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/Projects/my-Portfolio/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Projects/my-Portfolio/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\n\nvar fixOutMode = function fixOutMode(data) {\n  if (!isInArray(data.outMode, data.checkModes)) {\n    return;\n  }\n\n  if (data.coord > data.maxCoord - data.radius * 2) {\n    data.setCb(-data.radius);\n  } else if (data.coord < data.radius * 2) {\n    data.setCb(data.radius);\n  }\n};\n\nexport var Particle = /*#__PURE__*/function () {\n  function Particle(engine, id, container, position, overrideOptions, group) {\n    _classCallCheck(this, Particle);\n\n    this.container = container;\n    this._engine = engine;\n    this.init(id, position, overrideOptions, group);\n  }\n\n  _createClass(Particle, [{\n    key: \"destroy\",\n    value: function destroy(override) {\n      var _a;\n\n      if (this.unbreakable || this.destroyed) {\n        return;\n      }\n\n      this.destroyed = true;\n      this.bubble.inRange = false;\n      this.slow.inRange = false;\n\n      var _iterator = _createForOfIteratorHelper(this.container.plugins),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              plugin = _step$value[1];\n\n          if (plugin.particleDestroyed) {\n            plugin.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.container.particles.updaters),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var updater = _step2.value;\n\n          if (updater.particleDestroyed) {\n            updater.particleDestroyed(this, override);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n\n      (_a = this.pathGenerator) === null || _a === void 0 ? void 0 : _a.reset(this);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(delta) {\n      var container = this.container;\n\n      var _iterator3 = _createForOfIteratorHelper(container.plugins),\n          _step3;\n\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 2),\n              plugin = _step3$value[1];\n\n          container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n\n      container.canvas.drawParticle(this, delta);\n    }\n  }, {\n    key: \"getFillColor\",\n    value: function getFillColor() {\n      var _a, _b;\n\n      var color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n\n      if (color && this.roll && (this.backColor || this.roll.alter)) {\n        var backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1,\n            backSum = this.roll.horizontal ? Math.PI / 2 : 0,\n            rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n\n        if (rolled) {\n          if (this.backColor) {\n            return this.backColor;\n          }\n\n          if (this.roll.alter) {\n            return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n          }\n        }\n      }\n\n      return color;\n    }\n  }, {\n    key: \"getMass\",\n    value: function getMass() {\n      return Math.pow(this.getRadius(), 2) * Math.PI / 2;\n    }\n  }, {\n    key: \"getPosition\",\n    value: function getPosition() {\n      return {\n        x: this.position.x + this.offset.x,\n        y: this.position.y + this.offset.y,\n        z: this.position.z\n      };\n    }\n  }, {\n    key: \"getRadius\",\n    value: function getRadius() {\n      var _a;\n\n      return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n  }, {\n    key: \"getStrokeColor\",\n    value: function getStrokeColor() {\n      var _a, _b;\n\n      return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n  }, {\n    key: \"init\",\n    value: function init(id, position, overrideOptions, group) {\n      var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n\n      var container = this.container,\n          engine = this._engine;\n      this.id = id;\n      this.group = group;\n      this.fill = true;\n      this.pathRotation = false;\n      this.close = true;\n      this.lastPathTime = 0;\n      this.destroyed = false;\n      this.unbreakable = false;\n      this.rotation = 0;\n      this.misplaced = false;\n      this.retina = {\n        maxDistance: {}\n      };\n      this.outType = \"normal\";\n      this.ignoresResizeRatio = true;\n      var pxRatio = container.retina.pixelRatio,\n          mainOptions = container.actualOptions,\n          particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles),\n          shapeType = particlesOptions.shape.type,\n          reduceDuplicates = particlesOptions.reduceDuplicates;\n      this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n      var shapeOptions = particlesOptions.shape;\n\n      if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n        var overrideShapeType = overrideOptions.shape.type,\n            shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n\n        if (shape) {\n          this.shape = shape;\n          shapeOptions.load(overrideOptions.shape);\n        }\n      }\n\n      this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n      particlesOptions.load(overrideOptions);\n      particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n      this.interactivity = new Interactivity(engine, container);\n      this.interactivity.load(container.actualOptions.interactivity);\n      this.interactivity.load(particlesOptions.interactivity);\n      this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n      this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n      this.options = particlesOptions;\n      var pathOptions = this.options.move.path;\n      this.pathDelay = getValue(pathOptions.delay) * 1000;\n\n      if (pathOptions.generator) {\n        this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n\n        if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n          this.pathGenerator.init(container);\n        }\n      }\n\n      var zIndexValue = getRangeValue(this.options.zIndex.value);\n      container.retina.initParticle(this);\n      var sizeOptions = this.options.size,\n          sizeRange = sizeOptions.value,\n          sizeAnimation = sizeOptions.animation;\n      this.size = {\n        enable: sizeOptions.animation.enable,\n        value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n        max: getRangeMax(sizeRange) * pxRatio,\n        min: getRangeMin(sizeRange) * pxRatio,\n        loops: 0,\n        maxLoops: getRangeValue(sizeOptions.animation.count)\n      };\n\n      if (sizeAnimation.enable) {\n        this.size.status = \"increasing\";\n        this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n\n        switch (sizeAnimation.startValue) {\n          case \"min\":\n            this.size.value = this.size.min;\n            this.size.status = \"increasing\";\n            break;\n\n          case \"random\":\n            this.size.value = randomInRange(this.size) * pxRatio;\n            this.size.status = getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n            break;\n\n          case \"max\":\n          default:\n            this.size.value = this.size.max;\n            this.size.status = \"decreasing\";\n            break;\n        }\n      }\n\n      this.bubble = {\n        inRange: false\n      };\n      this.slow = {\n        inRange: false,\n        factor: 1\n      };\n      this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n      this.initialPosition = this.position.copy();\n      var canvasSize = container.canvas.size,\n          moveCenter = Object.assign({}, this.options.move.center),\n          isCenterPercent = moveCenter.mode === \"percent\";\n      this.moveCenter = {\n        x: moveCenter.x * (isCenterPercent ? canvasSize.width / 100 : 1),\n        y: moveCenter.y * (isCenterPercent ? canvasSize.height / 100 : 1),\n        radius: (_f = this.options.move.center.radius) !== null && _f !== void 0 ? _f : 0,\n        mode: (_g = this.options.move.center.mode) !== null && _g !== void 0 ? _g : \"percent\"\n      };\n      this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n\n      switch (this.options.move.direction) {\n        case \"inside\":\n          this.outType = \"inside\";\n          break;\n\n        case \"outside\":\n          this.outType = \"outside\";\n          break;\n      }\n\n      this.initialVelocity = this._calculateVelocity();\n      this.velocity = this.initialVelocity.copy();\n      this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n      this.offset = Vector.origin;\n      var particles = container.particles;\n      particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n      particles.lastZIndex = this.position.z;\n      this.zIndexFactor = this.position.z / container.zLayers;\n      this.sides = 24;\n      var drawer = container.drawers.get(this.shape);\n\n      if (!drawer) {\n        drawer = this._engine.plugins.getShapeDrawer(this.shape);\n\n        if (drawer) {\n          container.drawers.set(this.shape, drawer);\n        }\n      }\n\n      if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n        drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n      }\n\n      var sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n\n      if (sideCountFunc) {\n        this.sides = sideCountFunc(this);\n      }\n\n      this.spawning = false;\n      this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n\n      var _iterator4 = _createForOfIteratorHelper(container.particles.updaters),\n          _step4;\n\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var updater = _step4.value;\n          updater.init(this);\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      var _iterator5 = _createForOfIteratorHelper(container.particles.movers),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var mover = _step5.value;\n          (_h = mover.init) === null || _h === void 0 ? void 0 : _h.call(mover, this);\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n        drawer.particleInit(container, this);\n      }\n\n      var _iterator6 = _createForOfIteratorHelper(container.plugins),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _step6$value = _slicedToArray(_step6.value, 2),\n              plugin = _step6$value[1];\n\n          (_j = plugin.particleCreated) === null || _j === void 0 ? void 0 : _j.call(plugin, this);\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n    }\n  }, {\n    key: \"isInsideCanvas\",\n    value: function isInsideCanvas() {\n      var radius = this.getRadius(),\n          canvasSize = this.container.canvas.size;\n      return this.position.x >= -radius && this.position.y >= -radius && this.position.y <= canvasSize.height + radius && this.position.x <= canvasSize.width + radius;\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var _a;\n\n      var _iterator7 = _createForOfIteratorHelper(this.container.particles.updaters),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var updater = _step7.value;\n          (_a = updater.reset) === null || _a === void 0 ? void 0 : _a.call(updater, this);\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n    }\n  }, {\n    key: \"_calcPosition\",\n    value: function _calcPosition(container, position, zIndex) {\n      var tryCount = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n      var _a, _b, _c, _d;\n\n      var _iterator8 = _createForOfIteratorHelper(container.plugins),\n          _step8;\n\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _step8$value = _slicedToArray(_step8.value, 2),\n              plugin = _step8$value[1];\n\n          var pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n\n          if (pluginPos !== undefined) {\n            return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n          }\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n\n      var canvasSize = container.canvas.size,\n          exactPosition = calcExactPositionOrRandomFromSize({\n        size: canvasSize,\n        position: position\n      }),\n          pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex),\n          radius = this.getRadius(),\n          outModes = this.options.move.outModes,\n          fixHorizontal = function fixHorizontal(outMode) {\n        fixOutMode({\n          outMode: outMode,\n          checkModes: [\"bounce\", \"bounce-horizontal\"],\n          coord: pos.x,\n          maxCoord: container.canvas.size.width,\n          setCb: function setCb(value) {\n            return pos.x += value;\n          },\n          radius: radius\n        });\n      },\n          fixVertical = function fixVertical(outMode) {\n        fixOutMode({\n          outMode: outMode,\n          checkModes: [\"bounce\", \"bounce-vertical\"],\n          coord: pos.y,\n          maxCoord: container.canvas.size.height,\n          setCb: function setCb(value) {\n            return pos.y += value;\n          },\n          radius: radius\n        });\n      };\n\n      fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n      fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n      fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n      fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n\n      if (this._checkOverlap(pos, tryCount)) {\n        return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n      }\n\n      return pos;\n    }\n  }, {\n    key: \"_calculateVelocity\",\n    value: function _calculateVelocity() {\n      var baseVelocity = getParticleBaseVelocity(this.direction),\n          res = baseVelocity.copy(),\n          moveOptions = this.options.move;\n\n      if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n        return res;\n      }\n\n      var rad = Math.PI / 180 * getRangeValue(moveOptions.angle.value),\n          radOffset = Math.PI / 180 * getRangeValue(moveOptions.angle.offset),\n          range = {\n        left: radOffset - rad / 2,\n        right: radOffset + rad / 2\n      };\n\n      if (!moveOptions.straight) {\n        res.angle += randomInRange(setRangeValue(range.left, range.right));\n      }\n\n      if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n        res.length *= getRandom();\n      }\n\n      return res;\n    }\n  }, {\n    key: \"_checkOverlap\",\n    value: function _checkOverlap(pos) {\n      var tryCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var collisionsOptions = this.options.collisions,\n          radius = this.getRadius();\n\n      if (!collisionsOptions.enable) {\n        return false;\n      }\n\n      var overlapOptions = collisionsOptions.overlap;\n\n      if (overlapOptions.enable) {\n        return false;\n      }\n\n      var retries = overlapOptions.retries;\n\n      if (retries >= 0 && tryCount > retries) {\n        throw new Error(\"Particle is overlapping and can't be placed\");\n      }\n\n      var overlaps = false;\n\n      var _iterator9 = _createForOfIteratorHelper(this.container.particles.array),\n          _step9;\n\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var particle = _step9.value;\n\n          if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n            overlaps = true;\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n\n      return overlaps;\n    }\n  }, {\n    key: \"_loadShapeData\",\n    value: function _loadShapeData(shapeOptions, reduceDuplicates) {\n      var shapeData = shapeOptions.options[this.shape];\n\n      if (shapeData) {\n        return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n      }\n    }\n  }]);\n\n  return Particle;\n}();","map":{"version":3,"names":["calcExactPositionOrRandomFromSize","clamp","getDistance","getParticleBaseVelocity","getParticleDirectionAngle","getRandom","getRangeMax","getRangeMin","getRangeValue","getValue","randomInRange","setRangeValue","deepExtend","isInArray","itemFromSingleOrMultiple","getHslFromAnimation","rangeColorToRgb","Interactivity","Vector","Vector3d","alterHsl","loadParticlesOptions","fixOutMode","data","outMode","checkModes","coord","maxCoord","radius","setCb","Particle","engine","id","container","position","overrideOptions","group","_engine","init","override","_a","unbreakable","destroyed","bubble","inRange","slow","plugins","plugin","particleDestroyed","particles","updaters","updater","pathGenerator","reset","delta","canvas","drawParticlePlugin","drawParticle","_b","color","roll","backColor","alter","backFactor","horizontal","vertical","backSum","Math","PI","rolled","floor","angle","type","value","getRadius","x","offset","y","z","size","strokeColor","getFillColor","_c","_d","_e","_f","_g","_h","_j","fill","pathRotation","close","lastPathTime","rotation","misplaced","retina","maxDistance","outType","ignoresResizeRatio","pxRatio","pixelRatio","mainOptions","actualOptions","particlesOptions","shapeType","shape","reduceDuplicates","shapeOptions","overrideShapeType","load","shapeData","_loadShapeData","interactivity","options","pathOptions","move","path","pathDelay","delay","generator","getPathGenerator","addPath","zIndexValue","zIndex","initParticle","sizeOptions","sizeRange","sizeAnimation","animation","enable","max","min","loops","maxLoops","count","status","decay","startValue","factor","_calcPosition","zLayers","initialPosition","copy","canvasSize","moveCenter","Object","assign","center","isCenterPercent","mode","width","height","direction","initialVelocity","_calculateVelocity","velocity","moveDecay","origin","needsSort","lastZIndex","zIndexFactor","sides","drawer","drawers","get","getShapeDrawer","set","loadShape","sideCountFunc","getSidesCount","spawning","shadowColor","shadow","movers","mover","call","particleInit","particleCreated","isInsideCanvas","tryCount","pluginPos","particlePosition","undefined","create","exactPosition","pos","outModes","fixHorizontal","fixVertical","left","default","right","top","bottom","_checkOverlap","baseVelocity","res","moveOptions","rad","radOffset","range","straight","random","speed","length","collisionsOptions","collisions","overlapOptions","overlap","retries","Error","overlaps","array","particle"],"sources":["D:/Projects/my-Portfolio/node_modules/tsparticles-engine/esm/Core/Particle.js"],"sourcesContent":["import { calcExactPositionOrRandomFromSize, clamp, getDistance, getParticleBaseVelocity, getParticleDirectionAngle, getRandom, getRangeMax, getRangeMin, getRangeValue, getValue, randomInRange, setRangeValue, } from \"../Utils/NumberUtils\";\nimport { deepExtend, isInArray, itemFromSingleOrMultiple } from \"../Utils/Utils\";\nimport { getHslFromAnimation, rangeColorToRgb } from \"../Utils/ColorUtils\";\nimport { Interactivity } from \"../Options/Classes/Interactivity/Interactivity\";\nimport { Vector } from \"./Utils/Vector\";\nimport { Vector3d } from \"./Utils/Vector3d\";\nimport { alterHsl } from \"../Utils/CanvasUtils\";\nimport { loadParticlesOptions } from \"../Utils/OptionsUtils\";\nconst fixOutMode = (data) => {\n    if (!isInArray(data.outMode, data.checkModes)) {\n        return;\n    }\n    if (data.coord > data.maxCoord - data.radius * 2) {\n        data.setCb(-data.radius);\n    }\n    else if (data.coord < data.radius * 2) {\n        data.setCb(data.radius);\n    }\n};\nexport class Particle {\n    constructor(engine, id, container, position, overrideOptions, group) {\n        this.container = container;\n        this._engine = engine;\n        this.init(id, position, overrideOptions, group);\n    }\n    destroy(override) {\n        var _a;\n        if (this.unbreakable || this.destroyed) {\n            return;\n        }\n        this.destroyed = true;\n        this.bubble.inRange = false;\n        this.slow.inRange = false;\n        for (const [, plugin] of this.container.plugins) {\n            if (plugin.particleDestroyed) {\n                plugin.particleDestroyed(this, override);\n            }\n        }\n        for (const updater of this.container.particles.updaters) {\n            if (updater.particleDestroyed) {\n                updater.particleDestroyed(this, override);\n            }\n        }\n        (_a = this.pathGenerator) === null || _a === void 0 ? void 0 : _a.reset(this);\n    }\n    draw(delta) {\n        const container = this.container;\n        for (const [, plugin] of container.plugins) {\n            container.canvas.drawParticlePlugin(plugin, this, delta);\n        }\n        container.canvas.drawParticle(this, delta);\n    }\n    getFillColor() {\n        var _a, _b;\n        const color = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.color);\n        if (color && this.roll && (this.backColor || this.roll.alter)) {\n            const backFactor = this.roll.horizontal && this.roll.vertical ? 2 : 1, backSum = this.roll.horizontal ? Math.PI / 2 : 0, rolled = Math.floor((((_b = this.roll.angle) !== null && _b !== void 0 ? _b : 0) + backSum) / (Math.PI / backFactor)) % 2;\n            if (rolled) {\n                if (this.backColor) {\n                    return this.backColor;\n                }\n                if (this.roll.alter) {\n                    return alterHsl(color, this.roll.alter.type, this.roll.alter.value);\n                }\n            }\n        }\n        return color;\n    }\n    getMass() {\n        return (this.getRadius() ** 2 * Math.PI) / 2;\n    }\n    getPosition() {\n        return {\n            x: this.position.x + this.offset.x,\n            y: this.position.y + this.offset.y,\n            z: this.position.z,\n        };\n    }\n    getRadius() {\n        var _a;\n        return (_a = this.bubble.radius) !== null && _a !== void 0 ? _a : this.size.value;\n    }\n    getStrokeColor() {\n        var _a, _b;\n        return (_b = (_a = this.bubble.color) !== null && _a !== void 0 ? _a : getHslFromAnimation(this.strokeColor)) !== null && _b !== void 0 ? _b : this.getFillColor();\n    }\n    init(id, position, overrideOptions, group) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        const container = this.container, engine = this._engine;\n        this.id = id;\n        this.group = group;\n        this.fill = true;\n        this.pathRotation = false;\n        this.close = true;\n        this.lastPathTime = 0;\n        this.destroyed = false;\n        this.unbreakable = false;\n        this.rotation = 0;\n        this.misplaced = false;\n        this.retina = {\n            maxDistance: {},\n        };\n        this.outType = \"normal\";\n        this.ignoresResizeRatio = true;\n        const pxRatio = container.retina.pixelRatio, mainOptions = container.actualOptions, particlesOptions = loadParticlesOptions(this._engine, container, mainOptions.particles), shapeType = particlesOptions.shape.type, { reduceDuplicates } = particlesOptions;\n        this.shape = itemFromSingleOrMultiple(shapeType, this.id, reduceDuplicates);\n        const shapeOptions = particlesOptions.shape;\n        if (overrideOptions && overrideOptions.shape && overrideOptions.shape.type) {\n            const overrideShapeType = overrideOptions.shape.type, shape = itemFromSingleOrMultiple(overrideShapeType, this.id, reduceDuplicates);\n            if (shape) {\n                this.shape = shape;\n                shapeOptions.load(overrideOptions.shape);\n            }\n        }\n        this.shapeData = this._loadShapeData(shapeOptions, reduceDuplicates);\n        particlesOptions.load(overrideOptions);\n        particlesOptions.load((_a = this.shapeData) === null || _a === void 0 ? void 0 : _a.particles);\n        this.interactivity = new Interactivity(engine, container);\n        this.interactivity.load(container.actualOptions.interactivity);\n        this.interactivity.load(particlesOptions.interactivity);\n        this.fill = (_c = (_b = this.shapeData) === null || _b === void 0 ? void 0 : _b.fill) !== null && _c !== void 0 ? _c : this.fill;\n        this.close = (_e = (_d = this.shapeData) === null || _d === void 0 ? void 0 : _d.close) !== null && _e !== void 0 ? _e : this.close;\n        this.options = particlesOptions;\n        const pathOptions = this.options.move.path;\n        this.pathDelay = getValue(pathOptions.delay) * 1000;\n        if (pathOptions.generator) {\n            this.pathGenerator = this._engine.plugins.getPathGenerator(pathOptions.generator);\n            if (this.pathGenerator && container.addPath(pathOptions.generator, this.pathGenerator)) {\n                this.pathGenerator.init(container);\n            }\n        }\n        const zIndexValue = getRangeValue(this.options.zIndex.value);\n        container.retina.initParticle(this);\n        const sizeOptions = this.options.size, sizeRange = sizeOptions.value, sizeAnimation = sizeOptions.animation;\n        this.size = {\n            enable: sizeOptions.animation.enable,\n            value: getRangeValue(sizeOptions.value) * container.retina.pixelRatio,\n            max: getRangeMax(sizeRange) * pxRatio,\n            min: getRangeMin(sizeRange) * pxRatio,\n            loops: 0,\n            maxLoops: getRangeValue(sizeOptions.animation.count),\n        };\n        if (sizeAnimation.enable) {\n            this.size.status = \"increasing\";\n            this.size.decay = 1 - getRangeValue(sizeAnimation.decay);\n            switch (sizeAnimation.startValue) {\n                case \"min\":\n                    this.size.value = this.size.min;\n                    this.size.status = \"increasing\";\n                    break;\n                case \"random\":\n                    this.size.value = randomInRange(this.size) * pxRatio;\n                    this.size.status = getRandom() >= 0.5 ? \"increasing\" : \"decreasing\";\n                    break;\n                case \"max\":\n                default:\n                    this.size.value = this.size.max;\n                    this.size.status = \"decreasing\";\n                    break;\n            }\n        }\n        this.bubble = {\n            inRange: false,\n        };\n        this.slow = {\n            inRange: false,\n            factor: 1,\n        };\n        this.position = this._calcPosition(container, position, clamp(zIndexValue, 0, container.zLayers));\n        this.initialPosition = this.position.copy();\n        const canvasSize = container.canvas.size, moveCenter = Object.assign({}, this.options.move.center), isCenterPercent = moveCenter.mode === \"percent\";\n        this.moveCenter = {\n            x: moveCenter.x * (isCenterPercent ? canvasSize.width / 100 : 1),\n            y: moveCenter.y * (isCenterPercent ? canvasSize.height / 100 : 1),\n            radius: (_f = this.options.move.center.radius) !== null && _f !== void 0 ? _f : 0,\n            mode: (_g = this.options.move.center.mode) !== null && _g !== void 0 ? _g : \"percent\",\n        };\n        this.direction = getParticleDirectionAngle(this.options.move.direction, this.position, this.moveCenter);\n        switch (this.options.move.direction) {\n            case \"inside\":\n                this.outType = \"inside\";\n                break;\n            case \"outside\":\n                this.outType = \"outside\";\n                break;\n        }\n        this.initialVelocity = this._calculateVelocity();\n        this.velocity = this.initialVelocity.copy();\n        this.moveDecay = 1 - getRangeValue(this.options.move.decay);\n        this.offset = Vector.origin;\n        const particles = container.particles;\n        particles.needsSort = particles.needsSort || particles.lastZIndex < this.position.z;\n        particles.lastZIndex = this.position.z;\n        this.zIndexFactor = this.position.z / container.zLayers;\n        this.sides = 24;\n        let drawer = container.drawers.get(this.shape);\n        if (!drawer) {\n            drawer = this._engine.plugins.getShapeDrawer(this.shape);\n            if (drawer) {\n                container.drawers.set(this.shape, drawer);\n            }\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.loadShape) {\n            drawer === null || drawer === void 0 ? void 0 : drawer.loadShape(this);\n        }\n        const sideCountFunc = drawer === null || drawer === void 0 ? void 0 : drawer.getSidesCount;\n        if (sideCountFunc) {\n            this.sides = sideCountFunc(this);\n        }\n        this.spawning = false;\n        this.shadowColor = rangeColorToRgb(this.options.shadow.color);\n        for (const updater of container.particles.updaters) {\n            updater.init(this);\n        }\n        for (const mover of container.particles.movers) {\n            (_h = mover.init) === null || _h === void 0 ? void 0 : _h.call(mover, this);\n        }\n        if (drawer === null || drawer === void 0 ? void 0 : drawer.particleInit) {\n            drawer.particleInit(container, this);\n        }\n        for (const [, plugin] of container.plugins) {\n            (_j = plugin.particleCreated) === null || _j === void 0 ? void 0 : _j.call(plugin, this);\n        }\n    }\n    isInsideCanvas() {\n        const radius = this.getRadius(), canvasSize = this.container.canvas.size;\n        return (this.position.x >= -radius &&\n            this.position.y >= -radius &&\n            this.position.y <= canvasSize.height + radius &&\n            this.position.x <= canvasSize.width + radius);\n    }\n    isVisible() {\n        return !this.destroyed && !this.spawning && this.isInsideCanvas();\n    }\n    reset() {\n        var _a;\n        for (const updater of this.container.particles.updaters) {\n            (_a = updater.reset) === null || _a === void 0 ? void 0 : _a.call(updater, this);\n        }\n    }\n    _calcPosition(container, position, zIndex, tryCount = 0) {\n        var _a, _b, _c, _d;\n        for (const [, plugin] of container.plugins) {\n            const pluginPos = plugin.particlePosition !== undefined ? plugin.particlePosition(position, this) : undefined;\n            if (pluginPos !== undefined) {\n                return Vector3d.create(pluginPos.x, pluginPos.y, zIndex);\n            }\n        }\n        const canvasSize = container.canvas.size, exactPosition = calcExactPositionOrRandomFromSize({\n            size: canvasSize,\n            position: position,\n        }), pos = Vector3d.create(exactPosition.x, exactPosition.y, zIndex), radius = this.getRadius(), outModes = this.options.move.outModes, fixHorizontal = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-horizontal\"],\n                coord: pos.x,\n                maxCoord: container.canvas.size.width,\n                setCb: (value) => (pos.x += value),\n                radius,\n            });\n        }, fixVertical = (outMode) => {\n            fixOutMode({\n                outMode,\n                checkModes: [\"bounce\", \"bounce-vertical\"],\n                coord: pos.y,\n                maxCoord: container.canvas.size.height,\n                setCb: (value) => (pos.y += value),\n                radius,\n            });\n        };\n        fixHorizontal((_a = outModes.left) !== null && _a !== void 0 ? _a : outModes.default);\n        fixHorizontal((_b = outModes.right) !== null && _b !== void 0 ? _b : outModes.default);\n        fixVertical((_c = outModes.top) !== null && _c !== void 0 ? _c : outModes.default);\n        fixVertical((_d = outModes.bottom) !== null && _d !== void 0 ? _d : outModes.default);\n        if (this._checkOverlap(pos, tryCount)) {\n            return this._calcPosition(container, undefined, zIndex, tryCount + 1);\n        }\n        return pos;\n    }\n    _calculateVelocity() {\n        const baseVelocity = getParticleBaseVelocity(this.direction), res = baseVelocity.copy(), moveOptions = this.options.move;\n        if (moveOptions.direction === \"inside\" || moveOptions.direction === \"outside\") {\n            return res;\n        }\n        const rad = (Math.PI / 180) * getRangeValue(moveOptions.angle.value), radOffset = (Math.PI / 180) * getRangeValue(moveOptions.angle.offset), range = {\n            left: radOffset - rad / 2,\n            right: radOffset + rad / 2,\n        };\n        if (!moveOptions.straight) {\n            res.angle += randomInRange(setRangeValue(range.left, range.right));\n        }\n        if (moveOptions.random && typeof moveOptions.speed === \"number\") {\n            res.length *= getRandom();\n        }\n        return res;\n    }\n    _checkOverlap(pos, tryCount = 0) {\n        const collisionsOptions = this.options.collisions, radius = this.getRadius();\n        if (!collisionsOptions.enable) {\n            return false;\n        }\n        const overlapOptions = collisionsOptions.overlap;\n        if (overlapOptions.enable) {\n            return false;\n        }\n        const retries = overlapOptions.retries;\n        if (retries >= 0 && tryCount > retries) {\n            throw new Error(\"Particle is overlapping and can't be placed\");\n        }\n        let overlaps = false;\n        for (const particle of this.container.particles.array) {\n            if (getDistance(pos, particle.position) < radius + particle.getRadius()) {\n                overlaps = true;\n                break;\n            }\n        }\n        return overlaps;\n    }\n    _loadShapeData(shapeOptions, reduceDuplicates) {\n        const shapeData = shapeOptions.options[this.shape];\n        if (shapeData) {\n            return deepExtend({}, itemFromSingleOrMultiple(shapeData, this.id, reduceDuplicates));\n        }\n    }\n}\n"],"mappings":";;;;AAAA,SAASA,iCAAT,EAA4CC,KAA5C,EAAmDC,WAAnD,EAAgEC,uBAAhE,EAAyFC,yBAAzF,EAAoHC,SAApH,EAA+HC,WAA/H,EAA4IC,WAA5I,EAAyJC,aAAzJ,EAAwKC,QAAxK,EAAkLC,aAAlL,EAAiMC,aAAjM,QAAuN,sBAAvN;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,wBAAhC,QAAgE,gBAAhE;AACA,SAASC,mBAAT,EAA8BC,eAA9B,QAAqD,qBAArD;AACA,SAASC,aAAT,QAA8B,gDAA9B;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,oBAAT,QAAqC,uBAArC;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD,EAAU;EACzB,IAAI,CAACV,SAAS,CAACU,IAAI,CAACC,OAAN,EAAeD,IAAI,CAACE,UAApB,CAAd,EAA+C;IAC3C;EACH;;EACD,IAAIF,IAAI,CAACG,KAAL,GAAaH,IAAI,CAACI,QAAL,GAAgBJ,IAAI,CAACK,MAAL,GAAc,CAA/C,EAAkD;IAC9CL,IAAI,CAACM,KAAL,CAAW,CAACN,IAAI,CAACK,MAAjB;EACH,CAFD,MAGK,IAAIL,IAAI,CAACG,KAAL,GAAaH,IAAI,CAACK,MAAL,GAAc,CAA/B,EAAkC;IACnCL,IAAI,CAACM,KAAL,CAAWN,IAAI,CAACK,MAAhB;EACH;AACJ,CAVD;;AAWA,WAAaE,QAAb;EACI,kBAAYC,MAAZ,EAAoBC,EAApB,EAAwBC,SAAxB,EAAmCC,QAAnC,EAA6CC,eAA7C,EAA8DC,KAA9D,EAAqE;IAAA;;IACjE,KAAKH,SAAL,GAAiBA,SAAjB;IACA,KAAKI,OAAL,GAAeN,MAAf;IACA,KAAKO,IAAL,CAAUN,EAAV,EAAcE,QAAd,EAAwBC,eAAxB,EAAyCC,KAAzC;EACH;;EALL;IAAA;IAAA,OAMI,iBAAQG,QAAR,EAAkB;MACd,IAAIC,EAAJ;;MACA,IAAI,KAAKC,WAAL,IAAoB,KAAKC,SAA7B,EAAwC;QACpC;MACH;;MACD,KAAKA,SAAL,GAAiB,IAAjB;MACA,KAAKC,MAAL,CAAYC,OAAZ,GAAsB,KAAtB;MACA,KAAKC,IAAL,CAAUD,OAAV,GAAoB,KAApB;;MAPc,2CAQW,KAAKX,SAAL,CAAea,OAR1B;MAAA;;MAAA;QAQd,oDAAiD;UAAA;UAAA,IAAnCC,MAAmC;;UAC7C,IAAIA,MAAM,CAACC,iBAAX,EAA8B;YAC1BD,MAAM,CAACC,iBAAP,CAAyB,IAAzB,EAA+BT,QAA/B;UACH;QACJ;MAZa;QAAA;MAAA;QAAA;MAAA;;MAAA,4CAaQ,KAAKN,SAAL,CAAegB,SAAf,CAAyBC,QAbjC;MAAA;;MAAA;QAad,uDAAyD;UAAA,IAA9CC,OAA8C;;UACrD,IAAIA,OAAO,CAACH,iBAAZ,EAA+B;YAC3BG,OAAO,CAACH,iBAAR,CAA0B,IAA1B,EAAgCT,QAAhC;UACH;QACJ;MAjBa;QAAA;MAAA;QAAA;MAAA;;MAkBd,CAACC,EAAE,GAAG,KAAKY,aAAX,MAA8B,IAA9B,IAAsCZ,EAAE,KAAK,KAAK,CAAlD,GAAsD,KAAK,CAA3D,GAA+DA,EAAE,CAACa,KAAH,CAAS,IAAT,CAA/D;IACH;EAzBL;IAAA;IAAA,OA0BI,cAAKC,KAAL,EAAY;MACR,IAAMrB,SAAS,GAAG,KAAKA,SAAvB;;MADQ,4CAEiBA,SAAS,CAACa,OAF3B;MAAA;;MAAA;QAER,uDAA4C;UAAA;UAAA,IAA9BC,MAA8B;;UACxCd,SAAS,CAACsB,MAAV,CAAiBC,kBAAjB,CAAoCT,MAApC,EAA4C,IAA5C,EAAkDO,KAAlD;QACH;MAJO;QAAA;MAAA;QAAA;MAAA;;MAKRrB,SAAS,CAACsB,MAAV,CAAiBE,YAAjB,CAA8B,IAA9B,EAAoCH,KAApC;IACH;EAhCL;IAAA;IAAA,OAiCI,wBAAe;MACX,IAAId,EAAJ,EAAQkB,EAAR;;MACA,IAAMC,KAAK,GAAG,CAACnB,EAAE,GAAG,KAAKG,MAAL,CAAYgB,KAAlB,MAA6B,IAA7B,IAAqCnB,EAAE,KAAK,KAAK,CAAjD,GAAqDA,EAArD,GAA0DzB,mBAAmB,CAAC,KAAK4C,KAAN,CAA3F;;MACA,IAAIA,KAAK,IAAI,KAAKC,IAAd,KAAuB,KAAKC,SAAL,IAAkB,KAAKD,IAAL,CAAUE,KAAnD,CAAJ,EAA+D;QAC3D,IAAMC,UAAU,GAAG,KAAKH,IAAL,CAAUI,UAAV,IAAwB,KAAKJ,IAAL,CAAUK,QAAlC,GAA6C,CAA7C,GAAiD,CAApE;QAAA,IAAuEC,OAAO,GAAG,KAAKN,IAAL,CAAUI,UAAV,GAAuBG,IAAI,CAACC,EAAL,GAAU,CAAjC,GAAqC,CAAtH;QAAA,IAAyHC,MAAM,GAAGF,IAAI,CAACG,KAAL,CAAW,CAAC,CAAC,CAACZ,EAAE,GAAG,KAAKE,IAAL,CAAUW,KAAhB,MAA2B,IAA3B,IAAmCb,EAAE,KAAK,KAAK,CAA/C,GAAmDA,EAAnD,GAAwD,CAAzD,IAA8DQ,OAA/D,KAA2EC,IAAI,CAACC,EAAL,GAAUL,UAArF,CAAX,IAA+G,CAAjP;;QACA,IAAIM,MAAJ,EAAY;UACR,IAAI,KAAKR,SAAT,EAAoB;YAChB,OAAO,KAAKA,SAAZ;UACH;;UACD,IAAI,KAAKD,IAAL,CAAUE,KAAd,EAAqB;YACjB,OAAO1C,QAAQ,CAACuC,KAAD,EAAQ,KAAKC,IAAL,CAAUE,KAAV,CAAgBU,IAAxB,EAA8B,KAAKZ,IAAL,CAAUE,KAAV,CAAgBW,KAA9C,CAAf;UACH;QACJ;MACJ;;MACD,OAAOd,KAAP;IACH;EAhDL;IAAA;IAAA,OAiDI,mBAAU;MACN,OAAQ,cAAKe,SAAL,IAAoB,CAApB,IAAwBP,IAAI,CAACC,EAA9B,GAAoC,CAA3C;IACH;EAnDL;IAAA;IAAA,OAoDI,uBAAc;MACV,OAAO;QACHO,CAAC,EAAE,KAAKzC,QAAL,CAAcyC,CAAd,GAAkB,KAAKC,MAAL,CAAYD,CAD9B;QAEHE,CAAC,EAAE,KAAK3C,QAAL,CAAc2C,CAAd,GAAkB,KAAKD,MAAL,CAAYC,CAF9B;QAGHC,CAAC,EAAE,KAAK5C,QAAL,CAAc4C;MAHd,CAAP;IAKH;EA1DL;IAAA;IAAA,OA2DI,qBAAY;MACR,IAAItC,EAAJ;;MACA,OAAO,CAACA,EAAE,GAAG,KAAKG,MAAL,CAAYf,MAAlB,MAA8B,IAA9B,IAAsCY,EAAE,KAAK,KAAK,CAAlD,GAAsDA,EAAtD,GAA2D,KAAKuC,IAAL,CAAUN,KAA5E;IACH;EA9DL;IAAA;IAAA,OA+DI,0BAAiB;MACb,IAAIjC,EAAJ,EAAQkB,EAAR;;MACA,OAAO,CAACA,EAAE,GAAG,CAAClB,EAAE,GAAG,KAAKG,MAAL,CAAYgB,KAAlB,MAA6B,IAA7B,IAAqCnB,EAAE,KAAK,KAAK,CAAjD,GAAqDA,EAArD,GAA0DzB,mBAAmB,CAAC,KAAKiE,WAAN,CAAnF,MAA2G,IAA3G,IAAmHtB,EAAE,KAAK,KAAK,CAA/H,GAAmIA,EAAnI,GAAwI,KAAKuB,YAAL,EAA/I;IACH;EAlEL;IAAA;IAAA,OAmEI,cAAKjD,EAAL,EAASE,QAAT,EAAmBC,eAAnB,EAAoCC,KAApC,EAA2C;MACvC,IAAII,EAAJ,EAAQkB,EAAR,EAAYwB,EAAZ,EAAgBC,EAAhB,EAAoBC,EAApB,EAAwBC,EAAxB,EAA4BC,EAA5B,EAAgCC,EAAhC,EAAoCC,EAApC;;MACA,IAAMvD,SAAS,GAAG,KAAKA,SAAvB;MAAA,IAAkCF,MAAM,GAAG,KAAKM,OAAhD;MACA,KAAKL,EAAL,GAAUA,EAAV;MACA,KAAKI,KAAL,GAAaA,KAAb;MACA,KAAKqD,IAAL,GAAY,IAAZ;MACA,KAAKC,YAAL,GAAoB,KAApB;MACA,KAAKC,KAAL,GAAa,IAAb;MACA,KAAKC,YAAL,GAAoB,CAApB;MACA,KAAKlD,SAAL,GAAiB,KAAjB;MACA,KAAKD,WAAL,GAAmB,KAAnB;MACA,KAAKoD,QAAL,GAAgB,CAAhB;MACA,KAAKC,SAAL,GAAiB,KAAjB;MACA,KAAKC,MAAL,GAAc;QACVC,WAAW,EAAE;MADH,CAAd;MAGA,KAAKC,OAAL,GAAe,QAAf;MACA,KAAKC,kBAAL,GAA0B,IAA1B;MACM,IAAAC,OAAO,GAAGlE,SAAS,CAAC8D,MAAV,CAAiBK,UAA3B;MAAA,IAAuCC,WAAvC,GAAqDpE,SAAS,CAACqE,aAA/D;MAAA,IAA8EC,gBAA9E,GAAiGlF,oBAAoB,CAAC,KAAKgB,OAAN,EAAeJ,SAAf,EAA0BoE,WAAW,CAACpD,SAAtC,CAArH;MAAA,IAAuKuD,SAAvK,GAAmLD,gBAAgB,CAACE,KAAjB,CAAuBjC,IAA1M;MAAA,IAAkNkC,gBAAlN,GAAuOH,gBAAvO,CAAkNG,gBAAlN;MACN,KAAKD,KAAL,GAAa3F,wBAAwB,CAAC0F,SAAD,EAAY,KAAKxE,EAAjB,EAAqB0E,gBAArB,CAArC;MACA,IAAMC,YAAY,GAAGJ,gBAAgB,CAACE,KAAtC;;MACA,IAAItE,eAAe,IAAIA,eAAe,CAACsE,KAAnC,IAA4CtE,eAAe,CAACsE,KAAhB,CAAsBjC,IAAtE,EAA4E;QACxE,IAAMoC,iBAAiB,GAAGzE,eAAe,CAACsE,KAAhB,CAAsBjC,IAAhD;QAAA,IAAsDiC,KAAK,GAAG3F,wBAAwB,CAAC8F,iBAAD,EAAoB,KAAK5E,EAAzB,EAA6B0E,gBAA7B,CAAtF;;QACA,IAAID,KAAJ,EAAW;UACP,KAAKA,KAAL,GAAaA,KAAb;UACAE,YAAY,CAACE,IAAb,CAAkB1E,eAAe,CAACsE,KAAlC;QACH;MACJ;;MACD,KAAKK,SAAL,GAAiB,KAAKC,cAAL,CAAoBJ,YAApB,EAAkCD,gBAAlC,CAAjB;MACAH,gBAAgB,CAACM,IAAjB,CAAsB1E,eAAtB;MACAoE,gBAAgB,CAACM,IAAjB,CAAsB,CAACrE,EAAE,GAAG,KAAKsE,SAAX,MAA0B,IAA1B,IAAkCtE,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACS,SAApF;MACA,KAAK+D,aAAL,GAAqB,IAAI/F,aAAJ,CAAkBc,MAAlB,EAA0BE,SAA1B,CAArB;MACA,KAAK+E,aAAL,CAAmBH,IAAnB,CAAwB5E,SAAS,CAACqE,aAAV,CAAwBU,aAAhD;MACA,KAAKA,aAAL,CAAmBH,IAAnB,CAAwBN,gBAAgB,CAACS,aAAzC;MACA,KAAKvB,IAAL,GAAY,CAACP,EAAE,GAAG,CAACxB,EAAE,GAAG,KAAKoD,SAAX,MAA0B,IAA1B,IAAkCpD,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAAC+B,IAApE,MAA8E,IAA9E,IAAsFP,EAAE,KAAK,KAAK,CAAlG,GAAsGA,EAAtG,GAA2G,KAAKO,IAA5H;MACA,KAAKE,KAAL,GAAa,CAACP,EAAE,GAAG,CAACD,EAAE,GAAG,KAAK2B,SAAX,MAA0B,IAA1B,IAAkC3B,EAAE,KAAK,KAAK,CAA9C,GAAkD,KAAK,CAAvD,GAA2DA,EAAE,CAACQ,KAApE,MAA+E,IAA/E,IAAuFP,EAAE,KAAK,KAAK,CAAnG,GAAuGA,EAAvG,GAA4G,KAAKO,KAA9H;MACA,KAAKsB,OAAL,GAAeV,gBAAf;MACA,IAAMW,WAAW,GAAG,KAAKD,OAAL,CAAaE,IAAb,CAAkBC,IAAtC;MACA,KAAKC,SAAL,GAAiB5G,QAAQ,CAACyG,WAAW,CAACI,KAAb,CAAR,GAA8B,IAA/C;;MACA,IAAIJ,WAAW,CAACK,SAAhB,EAA2B;QACvB,KAAKnE,aAAL,GAAqB,KAAKf,OAAL,CAAaS,OAAb,CAAqB0E,gBAArB,CAAsCN,WAAW,CAACK,SAAlD,CAArB;;QACA,IAAI,KAAKnE,aAAL,IAAsBnB,SAAS,CAACwF,OAAV,CAAkBP,WAAW,CAACK,SAA9B,EAAyC,KAAKnE,aAA9C,CAA1B,EAAwF;UACpF,KAAKA,aAAL,CAAmBd,IAAnB,CAAwBL,SAAxB;QACH;MACJ;;MACD,IAAMyF,WAAW,GAAGlH,aAAa,CAAC,KAAKyG,OAAL,CAAaU,MAAb,CAAoBlD,KAArB,CAAjC;MACAxC,SAAS,CAAC8D,MAAV,CAAiB6B,YAAjB,CAA8B,IAA9B;MACA,IAAMC,WAAW,GAAG,KAAKZ,OAAL,CAAalC,IAAjC;MAAA,IAAuC+C,SAAS,GAAGD,WAAW,CAACpD,KAA/D;MAAA,IAAsEsD,aAAa,GAAGF,WAAW,CAACG,SAAlG;MACA,KAAKjD,IAAL,GAAY;QACRkD,MAAM,EAAEJ,WAAW,CAACG,SAAZ,CAAsBC,MADtB;QAERxD,KAAK,EAAEjE,aAAa,CAACqH,WAAW,CAACpD,KAAb,CAAb,GAAmCxC,SAAS,CAAC8D,MAAV,CAAiBK,UAFnD;QAGR8B,GAAG,EAAE5H,WAAW,CAACwH,SAAD,CAAX,GAAyB3B,OAHtB;QAIRgC,GAAG,EAAE5H,WAAW,CAACuH,SAAD,CAAX,GAAyB3B,OAJtB;QAKRiC,KAAK,EAAE,CALC;QAMRC,QAAQ,EAAE7H,aAAa,CAACqH,WAAW,CAACG,SAAZ,CAAsBM,KAAvB;MANf,CAAZ;;MAQA,IAAIP,aAAa,CAACE,MAAlB,EAA0B;QACtB,KAAKlD,IAAL,CAAUwD,MAAV,GAAmB,YAAnB;QACA,KAAKxD,IAAL,CAAUyD,KAAV,GAAkB,IAAIhI,aAAa,CAACuH,aAAa,CAACS,KAAf,CAAnC;;QACA,QAAQT,aAAa,CAACU,UAAtB;UACI,KAAK,KAAL;YACI,KAAK1D,IAAL,CAAUN,KAAV,GAAkB,KAAKM,IAAL,CAAUoD,GAA5B;YACA,KAAKpD,IAAL,CAAUwD,MAAV,GAAmB,YAAnB;YACA;;UACJ,KAAK,QAAL;YACI,KAAKxD,IAAL,CAAUN,KAAV,GAAkB/D,aAAa,CAAC,KAAKqE,IAAN,CAAb,GAA2BoB,OAA7C;YACA,KAAKpB,IAAL,CAAUwD,MAAV,GAAmBlI,SAAS,MAAM,GAAf,GAAqB,YAArB,GAAoC,YAAvD;YACA;;UACJ,KAAK,KAAL;UACA;YACI,KAAK0E,IAAL,CAAUN,KAAV,GAAkB,KAAKM,IAAL,CAAUmD,GAA5B;YACA,KAAKnD,IAAL,CAAUwD,MAAV,GAAmB,YAAnB;YACA;QAbR;MAeH;;MACD,KAAK5F,MAAL,GAAc;QACVC,OAAO,EAAE;MADC,CAAd;MAGA,KAAKC,IAAL,GAAY;QACRD,OAAO,EAAE,KADD;QAER8F,MAAM,EAAE;MAFA,CAAZ;MAIA,KAAKxG,QAAL,GAAgB,KAAKyG,aAAL,CAAmB1G,SAAnB,EAA8BC,QAA9B,EAAwCjC,KAAK,CAACyH,WAAD,EAAc,CAAd,EAAiBzF,SAAS,CAAC2G,OAA3B,CAA7C,CAAhB;MACA,KAAKC,eAAL,GAAuB,KAAK3G,QAAL,CAAc4G,IAAd,EAAvB;MACA,IAAMC,UAAU,GAAG9G,SAAS,CAACsB,MAAV,CAAiBwB,IAApC;MAAA,IAA0CiE,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKjC,OAAL,CAAaE,IAAb,CAAkBgC,MAApC,CAAvD;MAAA,IAAoGC,eAAe,GAAGJ,UAAU,CAACK,IAAX,KAAoB,SAA1I;MACA,KAAKL,UAAL,GAAkB;QACdrE,CAAC,EAAEqE,UAAU,CAACrE,CAAX,IAAgByE,eAAe,GAAGL,UAAU,CAACO,KAAX,GAAmB,GAAtB,GAA4B,CAA3D,CADW;QAEdzE,CAAC,EAAEmE,UAAU,CAACnE,CAAX,IAAgBuE,eAAe,GAAGL,UAAU,CAACQ,MAAX,GAAoB,GAAvB,GAA6B,CAA5D,CAFW;QAGd3H,MAAM,EAAE,CAACyD,EAAE,GAAG,KAAK4B,OAAL,CAAaE,IAAb,CAAkBgC,MAAlB,CAAyBvH,MAA/B,MAA2C,IAA3C,IAAmDyD,EAAE,KAAK,KAAK,CAA/D,GAAmEA,EAAnE,GAAwE,CAHlE;QAIdgE,IAAI,EAAE,CAAC/D,EAAE,GAAG,KAAK2B,OAAL,CAAaE,IAAb,CAAkBgC,MAAlB,CAAyBE,IAA/B,MAAyC,IAAzC,IAAiD/D,EAAE,KAAK,KAAK,CAA7D,GAAiEA,EAAjE,GAAsE;MAJ9D,CAAlB;MAMA,KAAKkE,SAAL,GAAiBpJ,yBAAyB,CAAC,KAAK6G,OAAL,CAAaE,IAAb,CAAkBqC,SAAnB,EAA8B,KAAKtH,QAAnC,EAA6C,KAAK8G,UAAlD,CAA1C;;MACA,QAAQ,KAAK/B,OAAL,CAAaE,IAAb,CAAkBqC,SAA1B;QACI,KAAK,QAAL;UACI,KAAKvD,OAAL,GAAe,QAAf;UACA;;QACJ,KAAK,SAAL;UACI,KAAKA,OAAL,GAAe,SAAf;UACA;MANR;;MAQA,KAAKwD,eAAL,GAAuB,KAAKC,kBAAL,EAAvB;MACA,KAAKC,QAAL,GAAgB,KAAKF,eAAL,CAAqBX,IAArB,EAAhB;MACA,KAAKc,SAAL,GAAiB,IAAIpJ,aAAa,CAAC,KAAKyG,OAAL,CAAaE,IAAb,CAAkBqB,KAAnB,CAAlC;MACA,KAAK5D,MAAL,GAAc1D,MAAM,CAAC2I,MAArB;MACA,IAAM5G,SAAS,GAAGhB,SAAS,CAACgB,SAA5B;MACAA,SAAS,CAAC6G,SAAV,GAAsB7G,SAAS,CAAC6G,SAAV,IAAuB7G,SAAS,CAAC8G,UAAV,GAAuB,KAAK7H,QAAL,CAAc4C,CAAlF;MACA7B,SAAS,CAAC8G,UAAV,GAAuB,KAAK7H,QAAL,CAAc4C,CAArC;MACA,KAAKkF,YAAL,GAAoB,KAAK9H,QAAL,CAAc4C,CAAd,GAAkB7C,SAAS,CAAC2G,OAAhD;MACA,KAAKqB,KAAL,GAAa,EAAb;MACA,IAAIC,MAAM,GAAGjI,SAAS,CAACkI,OAAV,CAAkBC,GAAlB,CAAsB,KAAK3D,KAA3B,CAAb;;MACA,IAAI,CAACyD,MAAL,EAAa;QACTA,MAAM,GAAG,KAAK7H,OAAL,CAAaS,OAAb,CAAqBuH,cAArB,CAAoC,KAAK5D,KAAzC,CAAT;;QACA,IAAIyD,MAAJ,EAAY;UACRjI,SAAS,CAACkI,OAAV,CAAkBG,GAAlB,CAAsB,KAAK7D,KAA3B,EAAkCyD,MAAlC;QACH;MACJ;;MACD,IAAIA,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACK,SAA3D,EAAsE;QAClEL,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACK,SAAP,CAAiB,IAAjB,CAAhD;MACH;;MACD,IAAMC,aAAa,GAAGN,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACO,aAA7E;;MACA,IAAID,aAAJ,EAAmB;QACf,KAAKP,KAAL,GAAaO,aAAa,CAAC,IAAD,CAA1B;MACH;;MACD,KAAKE,QAAL,GAAgB,KAAhB;MACA,KAAKC,WAAL,GAAmB3J,eAAe,CAAC,KAAKiG,OAAL,CAAa2D,MAAb,CAAoBjH,KAArB,CAAlC;;MA5HuC,4CA6HjB1B,SAAS,CAACgB,SAAV,CAAoBC,QA7HH;MAAA;;MAAA;QA6HvC,uDAAoD;UAAA,IAAzCC,OAAyC;UAChDA,OAAO,CAACb,IAAR,CAAa,IAAb;QACH;MA/HsC;QAAA;MAAA;QAAA;MAAA;;MAAA,4CAgInBL,SAAS,CAACgB,SAAV,CAAoB4H,MAhID;MAAA;;MAAA;QAgIvC,uDAAgD;UAAA,IAArCC,KAAqC;UAC5C,CAACvF,EAAE,GAAGuF,KAAK,CAACxI,IAAZ,MAAsB,IAAtB,IAA8BiD,EAAE,KAAK,KAAK,CAA1C,GAA8C,KAAK,CAAnD,GAAuDA,EAAE,CAACwF,IAAH,CAAQD,KAAR,EAAe,IAAf,CAAvD;QACH;MAlIsC;QAAA;MAAA;QAAA;MAAA;;MAmIvC,IAAIZ,MAAM,KAAK,IAAX,IAAmBA,MAAM,KAAK,KAAK,CAAnC,GAAuC,KAAK,CAA5C,GAAgDA,MAAM,CAACc,YAA3D,EAAyE;QACrEd,MAAM,CAACc,YAAP,CAAoB/I,SAApB,EAA+B,IAA/B;MACH;;MArIsC,4CAsIdA,SAAS,CAACa,OAtII;MAAA;;MAAA;QAsIvC,uDAA4C;UAAA;UAAA,IAA9BC,MAA8B;;UACxC,CAACyC,EAAE,GAAGzC,MAAM,CAACkI,eAAb,MAAkC,IAAlC,IAA0CzF,EAAE,KAAK,KAAK,CAAtD,GAA0D,KAAK,CAA/D,GAAmEA,EAAE,CAACuF,IAAH,CAAQhI,MAAR,EAAgB,IAAhB,CAAnE;QACH;MAxIsC;QAAA;MAAA;QAAA;MAAA;IAyI1C;EA5ML;IAAA;IAAA,OA6MI,0BAAiB;MACb,IAAMnB,MAAM,GAAG,KAAK8C,SAAL,EAAf;MAAA,IAAiCqE,UAAU,GAAG,KAAK9G,SAAL,CAAesB,MAAf,CAAsBwB,IAApE;MACA,OAAQ,KAAK7C,QAAL,CAAcyC,CAAd,IAAmB,CAAC/C,MAApB,IACJ,KAAKM,QAAL,CAAc2C,CAAd,IAAmB,CAACjD,MADhB,IAEJ,KAAKM,QAAL,CAAc2C,CAAd,IAAmBkE,UAAU,CAACQ,MAAX,GAAoB3H,MAFnC,IAGJ,KAAKM,QAAL,CAAcyC,CAAd,IAAmBoE,UAAU,CAACO,KAAX,GAAmB1H,MAH1C;IAIH;EAnNL;IAAA;IAAA,OAoNI,qBAAY;MACR,OAAO,CAAC,KAAKc,SAAN,IAAmB,CAAC,KAAKgI,QAAzB,IAAqC,KAAKQ,cAAL,EAA5C;IACH;EAtNL;IAAA;IAAA,OAuNI,iBAAQ;MACJ,IAAI1I,EAAJ;;MADI,4CAEkB,KAAKP,SAAL,CAAegB,SAAf,CAAyBC,QAF3C;MAAA;;MAAA;QAEJ,uDAAyD;UAAA,IAA9CC,OAA8C;UACrD,CAACX,EAAE,GAAGW,OAAO,CAACE,KAAd,MAAyB,IAAzB,IAAiCb,EAAE,KAAK,KAAK,CAA7C,GAAiD,KAAK,CAAtD,GAA0DA,EAAE,CAACuI,IAAH,CAAQ5H,OAAR,EAAiB,IAAjB,CAA1D;QACH;MAJG;QAAA;MAAA;QAAA;MAAA;IAKP;EA5NL;IAAA;IAAA,OA6NI,uBAAclB,SAAd,EAAyBC,QAAzB,EAAmCyF,MAAnC,EAAyD;MAAA,IAAdwD,QAAc,uEAAH,CAAG;;MACrD,IAAI3I,EAAJ,EAAQkB,EAAR,EAAYwB,EAAZ,EAAgBC,EAAhB;;MADqD,4CAE5BlD,SAAS,CAACa,OAFkB;MAAA;;MAAA;QAErD,uDAA4C;UAAA;UAAA,IAA9BC,MAA8B;;UACxC,IAAMqI,SAAS,GAAGrI,MAAM,CAACsI,gBAAP,KAA4BC,SAA5B,GAAwCvI,MAAM,CAACsI,gBAAP,CAAwBnJ,QAAxB,EAAkC,IAAlC,CAAxC,GAAkFoJ,SAApG;;UACA,IAAIF,SAAS,KAAKE,SAAlB,EAA6B;YACzB,OAAOnK,QAAQ,CAACoK,MAAT,CAAgBH,SAAS,CAACzG,CAA1B,EAA6ByG,SAAS,CAACvG,CAAvC,EAA0C8C,MAA1C,CAAP;UACH;QACJ;MAPoD;QAAA;MAAA;QAAA;MAAA;;MAQrD,IAAMoB,UAAU,GAAG9G,SAAS,CAACsB,MAAV,CAAiBwB,IAApC;MAAA,IAA0CyG,aAAa,GAAGxL,iCAAiC,CAAC;QACxF+E,IAAI,EAAEgE,UADkF;QAExF7G,QAAQ,EAAEA;MAF8E,CAAD,CAA3F;MAAA,IAGIuJ,GAAG,GAAGtK,QAAQ,CAACoK,MAAT,CAAgBC,aAAa,CAAC7G,CAA9B,EAAiC6G,aAAa,CAAC3G,CAA/C,EAAkD8C,MAAlD,CAHV;MAAA,IAGqE/F,MAAM,GAAG,KAAK8C,SAAL,EAH9E;MAAA,IAGgGgH,QAAQ,GAAG,KAAKzE,OAAL,CAAaE,IAAb,CAAkBuE,QAH7H;MAAA,IAGuIC,aAAa,GAAG,SAAhBA,aAAgB,CAACnK,OAAD,EAAa;QAChKF,UAAU,CAAC;UACPE,OAAO,EAAPA,OADO;UAEPC,UAAU,EAAE,CAAC,QAAD,EAAW,mBAAX,CAFL;UAGPC,KAAK,EAAE+J,GAAG,CAAC9G,CAHJ;UAIPhD,QAAQ,EAAEM,SAAS,CAACsB,MAAV,CAAiBwB,IAAjB,CAAsBuE,KAJzB;UAKPzH,KAAK,EAAE,eAAC4C,KAAD;YAAA,OAAYgH,GAAG,CAAC9G,CAAJ,IAASF,KAArB;UAAA,CALA;UAMP7C,MAAM,EAANA;QANO,CAAD,CAAV;MAQH,CAZD;MAAA,IAYGgK,WAAW,GAAG,SAAdA,WAAc,CAACpK,OAAD,EAAa;QAC1BF,UAAU,CAAC;UACPE,OAAO,EAAPA,OADO;UAEPC,UAAU,EAAE,CAAC,QAAD,EAAW,iBAAX,CAFL;UAGPC,KAAK,EAAE+J,GAAG,CAAC5G,CAHJ;UAIPlD,QAAQ,EAAEM,SAAS,CAACsB,MAAV,CAAiBwB,IAAjB,CAAsBwE,MAJzB;UAKP1H,KAAK,EAAE,eAAC4C,KAAD;YAAA,OAAYgH,GAAG,CAAC5G,CAAJ,IAASJ,KAArB;UAAA,CALA;UAMP7C,MAAM,EAANA;QANO,CAAD,CAAV;MAQH,CArBD;;MAsBA+J,aAAa,CAAC,CAACnJ,EAAE,GAAGkJ,QAAQ,CAACG,IAAf,MAAyB,IAAzB,IAAiCrJ,EAAE,KAAK,KAAK,CAA7C,GAAiDA,EAAjD,GAAsDkJ,QAAQ,CAACI,OAAhE,CAAb;MACAH,aAAa,CAAC,CAACjI,EAAE,GAAGgI,QAAQ,CAACK,KAAf,MAA0B,IAA1B,IAAkCrI,EAAE,KAAK,KAAK,CAA9C,GAAkDA,EAAlD,GAAuDgI,QAAQ,CAACI,OAAjE,CAAb;MACAF,WAAW,CAAC,CAAC1G,EAAE,GAAGwG,QAAQ,CAACM,GAAf,MAAwB,IAAxB,IAAgC9G,EAAE,KAAK,KAAK,CAA5C,GAAgDA,EAAhD,GAAqDwG,QAAQ,CAACI,OAA/D,CAAX;MACAF,WAAW,CAAC,CAACzG,EAAE,GAAGuG,QAAQ,CAACO,MAAf,MAA2B,IAA3B,IAAmC9G,EAAE,KAAK,KAAK,CAA/C,GAAmDA,EAAnD,GAAwDuG,QAAQ,CAACI,OAAlE,CAAX;;MACA,IAAI,KAAKI,aAAL,CAAmBT,GAAnB,EAAwBN,QAAxB,CAAJ,EAAuC;QACnC,OAAO,KAAKxC,aAAL,CAAmB1G,SAAnB,EAA8BqJ,SAA9B,EAAyC3D,MAAzC,EAAiDwD,QAAQ,GAAG,CAA5D,CAAP;MACH;;MACD,OAAOM,GAAP;IACH;EAnQL;IAAA;IAAA,OAoQI,8BAAqB;MACjB,IAAMU,YAAY,GAAGhM,uBAAuB,CAAC,KAAKqJ,SAAN,CAA5C;MAAA,IAA8D4C,GAAG,GAAGD,YAAY,CAACrD,IAAb,EAApE;MAAA,IAAyFuD,WAAW,GAAG,KAAKpF,OAAL,CAAaE,IAApH;;MACA,IAAIkF,WAAW,CAAC7C,SAAZ,KAA0B,QAA1B,IAAsC6C,WAAW,CAAC7C,SAAZ,KAA0B,SAApE,EAA+E;QAC3E,OAAO4C,GAAP;MACH;;MACD,IAAME,GAAG,GAAInI,IAAI,CAACC,EAAL,GAAU,GAAX,GAAkB5D,aAAa,CAAC6L,WAAW,CAAC9H,KAAZ,CAAkBE,KAAnB,CAA3C;MAAA,IAAsE8H,SAAS,GAAIpI,IAAI,CAACC,EAAL,GAAU,GAAX,GAAkB5D,aAAa,CAAC6L,WAAW,CAAC9H,KAAZ,CAAkBK,MAAnB,CAAjH;MAAA,IAA6I4H,KAAK,GAAG;QACjJX,IAAI,EAAEU,SAAS,GAAGD,GAAG,GAAG,CADyH;QAEjJP,KAAK,EAAEQ,SAAS,GAAGD,GAAG,GAAG;MAFwH,CAArJ;;MAIA,IAAI,CAACD,WAAW,CAACI,QAAjB,EAA2B;QACvBL,GAAG,CAAC7H,KAAJ,IAAa7D,aAAa,CAACC,aAAa,CAAC6L,KAAK,CAACX,IAAP,EAAaW,KAAK,CAACT,KAAnB,CAAd,CAA1B;MACH;;MACD,IAAIM,WAAW,CAACK,MAAZ,IAAsB,OAAOL,WAAW,CAACM,KAAnB,KAA6B,QAAvD,EAAiE;QAC7DP,GAAG,CAACQ,MAAJ,IAAcvM,SAAS,EAAvB;MACH;;MACD,OAAO+L,GAAP;IACH;EApRL;IAAA;IAAA,OAqRI,uBAAcX,GAAd,EAAiC;MAAA,IAAdN,QAAc,uEAAH,CAAG;MAC7B,IAAM0B,iBAAiB,GAAG,KAAK5F,OAAL,CAAa6F,UAAvC;MAAA,IAAmDlL,MAAM,GAAG,KAAK8C,SAAL,EAA5D;;MACA,IAAI,CAACmI,iBAAiB,CAAC5E,MAAvB,EAA+B;QAC3B,OAAO,KAAP;MACH;;MACD,IAAM8E,cAAc,GAAGF,iBAAiB,CAACG,OAAzC;;MACA,IAAID,cAAc,CAAC9E,MAAnB,EAA2B;QACvB,OAAO,KAAP;MACH;;MACD,IAAMgF,OAAO,GAAGF,cAAc,CAACE,OAA/B;;MACA,IAAIA,OAAO,IAAI,CAAX,IAAgB9B,QAAQ,GAAG8B,OAA/B,EAAwC;QACpC,MAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;MACH;;MACD,IAAIC,QAAQ,GAAG,KAAf;;MAb6B,4CAcN,KAAKlL,SAAL,CAAegB,SAAf,CAAyBmK,KAdnB;MAAA;;MAAA;QAc7B,uDAAuD;UAAA,IAA5CC,QAA4C;;UACnD,IAAInN,WAAW,CAACuL,GAAD,EAAM4B,QAAQ,CAACnL,QAAf,CAAX,GAAsCN,MAAM,GAAGyL,QAAQ,CAAC3I,SAAT,EAAnD,EAAyE;YACrEyI,QAAQ,GAAG,IAAX;YACA;UACH;QACJ;MAnB4B;QAAA;MAAA;QAAA;MAAA;;MAoB7B,OAAOA,QAAP;IACH;EA1SL;IAAA;IAAA,OA2SI,wBAAexG,YAAf,EAA6BD,gBAA7B,EAA+C;MAC3C,IAAMI,SAAS,GAAGH,YAAY,CAACM,OAAb,CAAqB,KAAKR,KAA1B,CAAlB;;MACA,IAAIK,SAAJ,EAAe;QACX,OAAOlG,UAAU,CAAC,EAAD,EAAKE,wBAAwB,CAACgG,SAAD,EAAY,KAAK9E,EAAjB,EAAqB0E,gBAArB,CAA7B,CAAjB;MACH;IACJ;EAhTL;;EAAA;AAAA"},"metadata":{},"sourceType":"module"}